function norm_pdf(x) {
	return Math.exp(-0.5*x*x);
}

function normal_pdf(x) {
	return (1.0/Math.sqrt(2*Math.PI))*Math.exp(-0.5*Math.pow(x,2));
}

function linspace(lower, upper, nbr) {
	let res = [];
	let step = (upper-lower)/nbr;
	for (var i=0; i<nbr; i++) {
		res.push(lower + i*step);
	}

	return res;
}

const zig256 = [
	{x: 3.6541528853610132 , y: 0.0012602859304985767 },
	{x: 3.449278298561436 , y: 0.00260907274610212 },
	{x: 3.3202447338398304 , y: 0.004037972593362964 },
	{x: 3.2245750520478067 , y: 0.005522403299250907 },
	{x: 3.147889289518006 , y: 0.007050875471373112 },
	{x: 3.0835261320021488 , y: 0.00861658276939858 },
	{x: 3.027837791769599 , y: 0.010214971439701301 },
	{x: 2.978603279881849 , y: 0.011842757857907685 },
	{x: 2.9343668672088934 , y: 0.013497450601739652 },
	{x: 2.894121053613418 , y: 0.015177088307935068 },
	{x: 2.8571387308732303 , y: 0.016880083152542892 },
	{x: 2.8228773968264487 , y: 0.01860512127572433 },
	{x: 2.7909211740019333 , y: 0.020351096230044184 },
	{x: 2.7609440052799923 , y: 0.0221170627073085 },
	{x: 2.7326853590440177 , y: 0.023902203305795483 },
	{x: 2.7059336561230687 , y: 0.025705804008548456 },
	{x: 2.6805146432857514 , y: 0.027527235669602607 },
	{x: 2.6562830375767494 , y: 0.029365939758132825 },
	{x: 2.633116393631589 , y: 0.03122141719191974 },
	{x: 2.6109105184888297 , y: 0.03309321945857799 },
	{x: 2.589575986708293 , y: 0.03498094146171553 },
	{x: 2.56903545268185 , y: 0.03688421568856669 },
	{x: 2.5492215503247895 , y: 0.038802707404525474 },
	{x: 2.5300752321598603 , y: 0.04073611065594028 },
	{x: 2.5115444416267003 , y: 0.04268414491647377 },
	{x: 2.493583041271053 , y: 0.044646552251293777 },
	{x: 2.4761499396705293 , y: 0.04662309490192965 },
	{x: 2.459208374334711 , y: 0.04861355321586778 },
	{x: 2.4427253182003703 , y: 0.05061772386094702 },
	{x: 2.426670984937153 , y: 0.0526354182767914 },
	{x: 2.4110184139011257 , y: 0.054666461324888095 },
	{x: 2.3957431197819337 , y: 0.05671069010620204 },
	{x: 2.380822795172092 , y: 0.05876795292093287 },
	{x: 2.3662370567172974 , y: 0.06083810834953894 },
	{x: 2.351967227379151 , y: 0.06292102443775716 },
	{x: 2.337996148796535 , y: 0.06501657797124186 },
	{x: 2.324308018871139 , y: 0.06712465382778748 },
	{x: 2.3108882506013786 , y: 0.0692451443970057 },
	{x: 2.2977233489028706 , y: 0.07137794905888925 },
	{x: 2.284800802724499 , y: 0.07352297371398007 },
	{x: 2.272108990228389 , y: 0.07568013035892587 },
	{x: 2.2596370951737947 , y: 0.07784933670209479 },
	{x: 2.2473750329473963 , y: 0.08003051581466178 },
	{x: 2.235313384929928 , y: 0.08222359581320156 },
	{x: 2.2234433400925173 , y: 0.08442850957035207 },
	{x: 2.211756642884168 , y: 0.08664519445055666 },
	{x: 2.2002455466112836 , y: 0.08887359206827443 },
	{x: 2.1889027716263683 , y: 0.09111364806637219 },
	{x: 2.1777214677403007 , y: 0.09336531191268932 },
	{x: 2.1666951803543166 , y: 0.0956285367130072 },
	{x: 2.155817819876746 , y: 0.09790327903886055 },
	{x: 2.1450836340478974 , y: 0.10018949876880799 },
	{x: 2.1344871828460255 , y: 0.10248715894193325 },
	{x: 2.124023315689532 , y: 0.10479622562248499 },
	{x: 2.113687150686662 , y: 0.1071166677746817 },
	{x: 2.1034740557148863 , y: 0.10944845714680962 },
	{x: 2.093379631138801 , y: 0.11179156816383588 },
	{x: 2.0833996939983135 , y: 0.11414597782783621 },
	{x: 2.073530263518752 , y: 0.11651166562560866 },
	{x: 2.063767547811741 , y: 0.11888861344290777 },
	{x: 2.054107931650661 , y: 0.12127680548478792 },
	{x: 2.0445479652175407 , y: 0.12367622820159423 },
	{x: 2.035084353729628 , y: 0.12608687022018347 },
	{x: 2.0257139478638635 , y: 0.12850872227999716 },
	{x: 2.0164337349062134 , y: 0.13094177717364183 },
	{x: 2.007240830560538 , y: 0.13338602969166663 },
	{x: 1.9981324713584292 , y: 0.13584147657125117 },
	{x: 1.9891060076174478 , y: 0.13830811644854807 },
	{x: 1.9801588969004862 , y: 0.140785949814442 },
	{x: 1.9712886979336688 , y: 0.1432749789735107 },
	{x: 1.9624930649443726 , y: 0.14577520800599134 },
	{x: 1.9537697423846563 , y: 0.14828664273257175 },
	{x: 1.945116560008688 , y: 0.1508092906818429 },
	{x: 1.9365314282757045 , y: 0.15334316106025994 },
	{x: 1.9280123340526756 , y: 0.15588826472447628 },
	{x: 1.9195573365931982 , y: 0.1584446141559213 },
	{x: 1.9111645637712635 , y: 0.16101222343750798 },
	{x: 1.9028322085504397 , y: 0.1635911082323625 },
	{x: 1.8945585256707151 , y: 0.16618128576447877 },
	{x: 1.8863418285367932 , y: 0.16878277480120818 },
	{x: 1.8781804862930065 , y: 0.17139559563750256 },
	{x: 1.8700729210712776 , y: 0.17401977008183525 },
	{x: 1.862017605399685 , y: 0.17665532144373142 },
	{x: 1.854013059760213 , y: 0.179302274522844 },
	{x: 1.8460578502851965 , y: 0.18196065559951888 },
	{x: 1.8381505865828176 , y: 0.18463049242679552 },
	{x: 1.830289919682768 , y: 0.1873118142237965 },
	{x: 1.822474540093897 , y: 0.19000465167046113 },
	{x: 1.814703175966294 , y: 0.19270903690358518 },
	{x: 1.8069745913508324 , y: 0.19542500351413028 },
	{x: 1.7992875845497318 , y: 0.198152586545771 },
	{x: 1.7916409865521743 , y: 0.2008918224946524 },
	{x: 1.7840336595494535 , y: 0.20364274931033058 },
	{x: 1.7764644955245348 , y: 0.20640540639787633 },
	{x: 1.7689324149112804 , y: 0.2091798346211206 },
	{x: 1.7614363653189222 , y: 0.21196607630702577 },
	{x: 1.7539753203176836 , y: 0.21476417525116906 },
	{x: 1.7465482782817345 , y: 0.21757417672432658 },
	{x: 1.7391542612859239 , y: 0.2203961274801473 },
	{x: 1.7317923140529754 , y: 0.2232300757639127 },
	{x: 1.7244615029480572 , y: 0.2260760713223754 },
	{x: 1.7171609150178355 , y: 0.2289341654146754 },
	{x: 1.7098896570713145 , y: 0.23180441082433365 },
	{x: 1.702646854799936 , y: 0.23468686187232482 },
	{x: 1.6954316519345747 , y: 0.23758157443123273 },
	{x: 1.6882432094372086 , y: 0.2404886059404951 },
	{x: 1.681080704725187 , y: 0.24340801542274473 },
	{x: 1.6739433309261382 , y: 0.24633986350125822 },
	{x: 1.6668302961616788 , y: 0.2492842124185228 },
	{x: 1.6597408228581958 , y: 0.25224112605593635 },
	{x: 1.652674147083069 , y: 0.25521066995465613 },
	{x: 1.6456295179047955 , y: 0.25819291133761335 },
	{x: 1.638606196775561 , y: 0.2611879191327152 },
	{x: 1.631603456934887 , y: 0.2641957639972551 },
	{x: 1.6246205828330482 , y: 0.2672165183435553 },
	{x: 1.6176568695730291 , y: 0.2702502563658693 },
	{x: 1.6107116223698437 , y: 0.2732970540685709 },
	{x: 1.6037841560261081 , y: 0.27635698929566205 },
	{x: 1.596873794422802 , y: 0.27943014176163167 },
	{x: 1.5899798700242047 , y: 0.28251659308370125 },
	{x: 1.5831017233960432 , y: 0.2856164268154953 },
	{x: 1.5762387027359204 , y: 0.2887297284821764 },
	{x: 1.569390163415138 , y: 0.29185658561708855 },
	{x: 1.5625554675310591 , y: 0.2949970877999551 },
	{x: 1.5557339834691908 , y: 0.2981513266966787 },
	{x: 1.5489250854741878 , y: 0.3013193961007962 },
	{x: 1.5421281532290163 , y: 0.30450139197664305 },
	{x: 1.5353425714415285 , y: 0.3076974125042852 },
	{x: 1.528567729437727 , y: 0.3109075581262795 },
	{x: 1.5218030207610125 , y: 0.3141319315963302 },
	{x: 1.515047842776729 , y: 0.3173706380299065 },
	{x: 1.508301596281326 , y: 0.3206237849568983 },
	{x: 1.5015636851154783 , y: 0.32389148237638393 },
	{x: 1.4948335157805084 , y: 0.32717384281359413 },
	{x: 1.4881104970574623 , y: 0.33047098137915615 },
	{x: 1.4813940396282024 , y: 0.3337830158307109 },
	{x: 1.4746835556978708 , y: 0.3371100666369984 },
	{x: 1.4679784586180948 , y: 0.3404522570445141 },
	{x: 1.4612781625102909 , y: 0.34380971314684294 },
	{x: 1.4545820818884256 , y: 0.34718256395678576 },
	{x: 1.4478896312805916 , y: 0.3505709414813981 },
	{x: 1.4412002248487397 , y: 0.3539749808000686 },
	{x: 1.434513276005908 , y: 0.3573948201457722 },
	{x: 1.427828197030272 , y: 0.3608306009896396 },
	{x: 1.421144398675325 , y: 0.3642824681289955 },
	{x: 1.4144612897754871 , y: 0.367750569779024 },
	{x: 1.4077782768464149 , y: 0.37123505766823084 },
	{x: 1.4010947636792672 , y: 0.37473608713788237 },
	{x: 1.3944101509281572 , y: 0.37825381724561036 },
	{x: 1.3877238356899924 , y: 0.3817884108733848 },
	{x: 1.381035211075872 , y: 0.38534003484006835 },
	{x: 1.374343665773183 , y: 0.3889088600187797 },
	{x: 1.367648583597493 , y: 0.3924950614593064 },
	{x: 1.3609493430333 , y: 0.3960988185158231 },
	{x: 1.354245316762652 , y: 0.39972031498018784 },
	{x: 1.3475358711806045 , y: 0.403359739221105 },
	{x: 1.3408203658964215 , y: 0.4070172843294637 },
	{x: 1.3340981532193776 , y: 0.4106931482701784 },
	{x: 1.3273685776279436 , y: 0.41438753404088124 },
	{x: 1.320630975221074 , y: 0.4181006498378382 },
	{x: 1.3138846731502385 , y: 0.4218327092294858 },
	{x: 1.3071289890307491 , y: 0.42558393133801176 },
	{x: 1.3003632303308554 , y: 0.4293545410294312 },
	{x: 1.2935866937369662 , y: 0.4331447691126418 },
	{x: 1.2867986644932623 , y: 0.4369548525479749 },
	{x: 1.2799984157138367 , y: 0.4407850346657932 },
	{x: 1.2731852076653754 , y: 0.44463556539572846 },
	{x: 1.2663582870182486 , y: 0.44850670150719196 },
	{x: 1.2595168860637336 , y: 0.45239870686183736 },
	{x: 1.2526602218949168 , y: 0.45631185267870505 },
	{x: 1.245787495548647 , y: 0.46024641781283127 },
	{x: 1.2388978911057071 , y: 0.4642026890481626 },
	{x: 1.231990574746156 , y: 0.4681809614056818 },
	{x: 1.2250646937565508 , y: 0.47218153846771826 },
	{x: 1.2181193754855018 , y: 0.4762047327194939 },
	{x: 1.2111537262437193 , y: 0.4802508659090347 },
	{x: 1.2041668301444017 , y: 0.4843202694266711 },
	{x: 1.197157747879462 , y: 0.48841328470544576 },
	{x: 1.1901255154267127 , y: 0.49253026364385616 },
	{x: 1.1830691426827076 , y: 0.49667156905247717 },
	{x: 1.175987612015473 , y: 0.500837575126136 },
	{x: 1.1688798767308544 , y: 0.5050286679434554 },
	{x: 1.1617448594456328 , y: 0.509245245995735 },
	{x: 1.1545814503599492 , y: 0.5134877207473139 },
	{x: 1.1473885054208708 , y: 0.517756517229743 },
	{x: 1.1401648443681731 , y: 0.5220520746723084 },
	{x: 1.132909248652556 , y: 0.5263748471716708 },
	{x: 1.125620459215556 , y: 0.5307253044036481 },
	{x: 1.118297174119368 , y: 0.5351039323804435 },
	{x: 1.110938046013599 , y: 0.5395112342569378 },
	{x: 1.103541679424663 , y: 0.5439477311900118 },
	{x: 1.096106627852045 , y: 0.5484139632552513 },
	{x: 1.0886313906540035 , y: 0.5529104904258176 },
	{x: 1.0811144097034278 , y: 0.5574378936187513 },
	{x: 1.0735540657924605 , y: 0.5619967758145094 },
	{x: 1.065948674762147 , y: 0.5665877632561492 },
	{x: 1.0582964833306998 , y: 0.5712115067352378 },
	{x: 1.0505956645909549 , y: 0.5758686829723382 },
	{x: 1.042844313144174 , y: 0.5805599961007752 },
	{x: 1.0350404398334663 , y: 0.5852861792633556 },
	{x: 1.0271819660356714 , y: 0.59004799633281 },
	{x: 1.0192667174655101 , y: 0.5948462437679713 },
	{x: 1.011292417440022 , y: 0.599681752619109 },
	{x: 1.0032566795446993 , y: 0.6045553906974515 },
	{x: 0.9951569996351177 , y: 0.6094680649257569 },
	{x: 0.9869907470990896 , y: 0.6144207238888971 },
	{x: 0.9787551552942522 , y: 0.6194143606058173 },
	{x: 0.9704473110642523 , y: 0.6244500155470093 },
	{x: 0.9620641432230689 , y: 0.6295287799248193 },
	{x: 0.9536024098811147 , y: 0.634651799287606 },
	{x: 0.9450586844681945 , y: 0.6398202774530387 },
	{x: 0.9364293402866047 , y: 0.6450354808208042 },
	{x: 0.92771053340203 , y: 0.6502987431107984 },
	{x: 0.918898183649621 , y: 0.6556114705796787 },
	{x: 0.9099879534967493 , y: 0.6609751477766443 },
	{x: 0.9009752244612532 , y: 0.666391343908731 },
	{x: 0.8918550707329734 , y: 0.6718617198970627 },
	{x: 0.882622229585198 , y: 0.6773880362187538 },
	{x: 0.8732710680888937 , y: 0.6829721616449748 },
	{x: 0.8637955455533424 , y: 0.6886160830046515 },
	{x: 0.854189171008198 , y: 0.6943219161260961 },
	{x: 0.8444449549091888 , y: 0.7000919181364906 },
	{x: 0.8345553540864177 , y: 0.705928501332733 },
	{x: 0.8245122087523283 , y: 0.7118342488782268 },
	{x: 0.8143066701352523 , y: 0.7178119326307 },
	{x: 0.803929116990009 , y: 0.7238645334686078 },
	{x: 0.7933690588406619 , y: 0.7299952645614535 },
	{x: 0.7826150233072725 , y: 0.7362075981268396 },
	{x: 0.7716544242246084 , y: 0.7425052963401276 },
	{x: 0.7604734064301494 , y: 0.748892447219133 },
	{x: 0.7490566620178576 , y: 0.7553735065070718 },
	{x: 0.737387211434339 , y: 0.7619533468367705 },
	{x: 0.7254461409100443 , y: 0.768637315798461 },
	{x: 0.713212285191022 , y: 0.7754313049811613 },
	{x: 0.7006618411068625 , y: 0.7823418326547761 },
	{x: 0.6877678927958375 , y: 0.7893761435659976 },
	{x: 0.6744998228373443 , y: 0.7965423304229314 },
	{x: 0.6608225742444722 , y: 0.8038494831709361 },
	{x: 0.6466957148950484 , y: 0.8113078743126273 },
	{x: 0.632072236386118 , y: 0.8189291916036726 },
	{x: 0.6168969900078107 , y: 0.8267268339461908 },
	{x: 0.6011046177560547 , y: 0.834716292986852 },
	{x: 0.5846167661064445 , y: 0.8429156531121718 },
	{x: 0.5673382570538876 , y: 0.8513462584586444 },
	{x: 0.5491517023272381 , y: 0.8600336211962968 },
	{x: 0.5299097206616358 , y: 0.869008688036821 },
	{x: 0.5094233296021752 , y: 0.8783096558088798 },
	{x: 0.4874439661393261 , y: 0.8879846607557941 },
	{x: 0.4636343367909807 , y: 0.8980959218983021 },
	{x: 0.4375184022079808 , y: 0.9087264400520871 },
	{x: 0.40838913461211473 , y: 0.9199915050393003 },
	{x: 0.3751213328785243 , y: 0.93206007595918 },
	{x: 0.3357375192146 , y: 0.9451989534422439 },
	{x: 0.2861745917923031 , y: 0.959879091800043 },
	{x: 0.21524189598525006 , y: 0.9771017012675938 },
	{x: 0.0, y: 1.0}
];

const zig128 = [
	{x: 3.442619855896662 , y: 0.002669629083902412 },
	{x: 3.2230849845786294 , y: 0.0055489952208162795 },
	{x: 3.0832288582142247 , y: 0.008624484412930171 },
	{x: 2.9786962526450282 , y: 0.011839478657981909 },
	{x: 2.8943440070186823 , y: 0.015167298010671529 },
	{x: 2.8231253505459786 , y: 0.018592102737165175 },
	{x: 2.7611693723841664 , y: 0.022103304616110826 },
	{x: 2.7061135731187353 , y: 0.02569329193614872 },
	{x: 2.6564064112582058 , y: 0.029356317440252792 },
	{x: 2.610972248428627 , y: 0.03308788614650398 },
	{x: 2.569033625921653 , y: 0.03688438878696747 },
	{x: 2.530009672385481 , y: 0.04074286807478916 },
	{x: 2.493454522091965 , y: 0.04466086220087083 },
	{x: 2.459018177408365 , y: 0.04863629586028231 },
	{x: 2.426420645530227 , y: 0.05266740190350125 },
	{x: 2.3954342780074827 , y: 0.05675266348153648 },
	{x: 2.3658713701140033 , y: 0.06089077034856413 },
	{x: 2.337575241335547 , y: 0.06508058521362944 },
	{x: 2.3104136836950184 , y: 0.06932111739417765 },
	{x: 2.284274059673673 , y: 0.07361150188475213 },
	{x: 2.259059573865346 , y: 0.07795098251465182 },
	{x: 2.2346863955870737 , y: 0.08233889824295432 },
	{x: 2.211081408874745 , y: 0.08677467189553972 },
	{x: 2.1881804320720377 , y: 0.09125780082763128 },
	{x: 2.165926793744858 , y: 0.09578784912257456 },
	{x: 2.144270182356279 , y: 0.10036444102954176 },
	{x: 2.123165708669808 , y: 0.10498725541035053 },
	{x: 2.102573135185017 , y: 0.10965602101581357 },
	{x: 2.082456237987743 , y: 0.1143705124498839 },
	{x: 2.062782274503982 , y: 0.11913054670871402 },
	{x: 2.0435215366506885 , y: 0.12393598020397695 },
	{x: 2.024646973372953 , y: 0.12878670619709898 },
	{x: 2.0061338699589863 , y: 0.13368265258464246 },
	{x: 1.9879595741230807 , y: 0.13862377998584557 },
	{x: 1.9701032608497333 , y: 0.1436100800919273 },
	{x: 1.952545729548909 , y: 0.1486415742436911 },
	{x: 1.9352692282919206 , y: 0.15371831220958052 },
	{x: 1.9182573008597525 , y: 0.1588403711409288 },
	{x: 1.9014946531003383 , y: 0.1640078546849213 },
	{x: 1.8849670357028903 , y: 0.16922089223891806 },
	{x: 1.8686611409895633 , y: 0.17447963833239538 },
	{x: 1.8525645117231087 , y: 0.17978427212495493 },
	{x: 1.8366654602534058 , y: 0.18513499701070601 },
	{x: 1.8209529965910272 , y: 0.1905320403209061 },
	{x: 1.805416764214071 , y: 0.1959756531181025 },
	{x: 1.7900469825946415 , y: 0.2014661100761951 },
	{x: 1.774834395580792 , y: 0.20700370944186547 },
	{x: 1.7597702248942548 , y: 0.21258877307372748 },
	{x: 1.7448461281083998 , y: 0.21822164655636175 },
	{x: 1.730054160558267 , y: 0.2239026993871248 },
	{x: 1.7153867407081405 , y: 0.22963232523429328 },
	{x: 1.700836618564325 , y: 0.23541094226571796 },
	{x: 1.6863968467735106 , y: 0.24123899354774136 },
	{x: 1.6720607540918766 , y: 0.2471169475146866 },
	{x: 1.6578219209482323 , y: 0.2530452985097555 },
	{x: 1.6436741568570077 , y: 0.25902456739870006 },
	{x: 1.6296114794647036 , y: 0.26505530225815105 },
	{x: 1.6156280950371584 , y: 0.27113807914101407 },
	{x: 1.601718380215303 , y: 0.27727350292188624 },
	{x: 1.5878768648844268 , y: 0.2834622082260007 },
	{x: 1.5740982160167762 , y: 0.2897048604457984 },
	{x: 1.5603772223598678 , y: 0.2960021568498434 },
	{x: 1.5467087798535308 , y: 0.302354827789467 },
	{x: 1.5330878776675838 , y: 0.3087636380092388 },
	{x: 1.5195095847593987 , y: 0.3152293880681441 },
	{x: 1.5059690368565786 , y: 0.32175291587919497 },
	{x: 1.492461423774644 , y: 0.3283350983761383 },
	{x: 1.4789819769831267 , y: 0.3349768533169568 },
	{x: 1.465525957335824 , y: 0.34167914123499904 },
	{x: 1.4520886428822462 , y: 0.34844296754985743 },
	{x: 1.4386653166774912 , y: 0.3552693848515318 },
	{x: 1.4252512545068918 , y: 0.3621594953730176 },
	{x: 1.4118417124397908 , y: 0.3691144536682592 },
	{x: 1.3984319141236374 , y: 0.3761354695144381 },
	{x: 1.3850170377251803 , y: 0.3832238110598669 },
	{x: 1.3715922024197642 , y: 0.39038080824137233 },
	{x: 1.3581524543224552 , y: 0.39760785649802505 },
	{x: 1.3446927517457459 , y: 0.4049064208114705 },
	{x: 1.3312079496577098 , y: 0.4122780401070063 },
	{x: 1.3176927832013767 , y: 0.41972433205401954 },
	{x: 1.3041418501204558 , y: 0.42724699830954327 },
	{x: 1.290549591917908 , y: 0.43484783025464235 },
	{x: 1.276910273551735 , y: 0.44252871528022664 },
	{x: 1.2632179614460641 , y: 0.45029164368690655 },
	{x: 1.2494664995643703 , y: 0.4581387162728511 },
	{x: 1.2356494832545184 , y: 0.4660721526945496 },
	{x: 1.2217602305310005 , y: 0.47409430069822767 },
	{x: 1.207791750406796 , y: 0.4822076463348162 },
	{x: 1.1937367078238112 , y: 0.4904148252892987 },
	{x: 1.1795873846545004 , y: 0.4987186354765609 },
	{x: 1.1653356361550875 , y: 0.5071220510812806 },
	{x: 1.1509728421390175 , y: 0.5156282382498475 },
	{x: 1.1364898520031177 , y: 0.5242405726789676 },
	{x: 1.121876922572297 , y: 0.5329626593899619 },
	{x: 1.1071236475235793 , y: 0.5417983550316978 },
	{x: 1.0922188768965986 , y: 0.5507517931210283 },
	{x: 1.0771506248819835 , y: 0.5598274127106672 },
	{x: 1.0619059636836663 , y: 0.5690299910746933 },
	{x: 1.0464709007526283 , y: 0.5783646811266733 },
	{x: 1.0308302360565047 , y: 0.5878370544417908 },
	{x: 1.01496739523935 , y: 0.5974531509517816 },
	{x: 0.9988642334806953 , y: 0.6072195366325734 },
	{x: 0.9825008035028135 , y: 0.6171433708265303 },
	{x: 0.9658550793881854 , y: 0.6272324852577814 },
	{x: 0.9489026254979682 , y: 0.6374954773431109 },
	{x: 0.9316161966014117 , y: 0.6479418211185158 },
	{x: 0.9139652510088616 , y: 0.6585820000586177 },
	{x: 0.8959153525663003 , y: 0.6694276673576691 },
	{x: 0.8774274290977796 , y: 0.6804918410063762 },
	{x: 0.8584568431781171 , y: 0.6917891434459965 },
	{x: 0.8389522142812762 , y: 0.7033360990257769 },
	{x: 0.8188539066833892 , y: 0.7151515074204352 },
	{x: 0.7980920606263494 , y: 0.7272569183544626 },
	{x: 0.7765839878762264 , y: 0.7396772436832934 },
	{x: 0.7542306644345919 , y: 0.7524415591856574 },
	{x: 0.7309119106219675 , y: 0.7655841739091878 },
	{x: 0.7064796113136993 , y: 0.7791460859416529 },
	{x: 0.6807479186460014 , y: 0.7931770117838067 },
	{x: 0.6534786387151467 , y: 0.8077382946960661 },
	{x: 0.624358597309201 , y: 0.8229072113952041 },
	{x: 0.5929629424421012 , y: 0.8387836053105859 },
	{x: 0.5586921783756547 , y: 0.8555006078849989 },
	{x: 0.5206560387252995 , y: 0.8732430489267833 },
	{x: 0.4774378372539675 , y: 0.8922816508022262 },
	{x: 0.4265479863035235 , y: 0.913043647991953 },
	{x: 0.36287143102870567 , y: 0.9362826817082734 },
	{x: 0.27232086470512185 , y: 0.9635996931556474 },
	{x: 0.0 , y: 1.0 }
];

const zig64 = [
	{x: 3.2136576271588955 , y: 0.005719935943749826 },
	{x: 2.9755475488121643 , y: 0.011950984636716773 },
	{x: 2.8214417337669384 , y: 0.018680656009417717 },
	{x: 2.704898440876237 , y: 0.025777898854343236 },
	{x: 2.609896494884204 , y: 0.03318093360594184 },
	{x: 2.528938180557692 , y: 0.040853443683104944 },
	{x: 2.45788839279943 , y: 0.048771572054647744 },
	{x: 2.3942152384559483 , y: 0.05691858850015227 },
	{x: 2.336251173784331 , y: 0.06528227144549417 },
	{x: 2.2828369954770573 , y: 0.07385346335416018 },
	{x: 2.2331325511090476 , y: 0.08262520535633805 },
	{x: 2.1865083181739338 , y: 0.0915921863568196 },
	{x: 2.142479567802234 , y: 0.10075037569043031 },
	{x: 2.1006644566838557 , y: 0.11009676921421681 },
	{x: 2.0607562912744344 , y: 0.11962920886379441 },
	{x: 2.0225045605567904 , y: 0.12934625170002814 },
	{x: 1.9857015973505139 , y: 0.13924707345730464 },
	{x: 1.9501729679923052 , y: 0.14933139689445654 },
	{x: 1.9157703997057938 , y: 0.15959943849179584 },
	{x: 1.8823664766124535 , y: 0.1700518690964376 },
	{x: 1.8498505942678831 , y: 0.1806897854672115 },
	{x: 1.8181258262770674 , y: 0.1915146905808468 },
	{x: 1.7871064626699495 , y: 0.2025284811931034 },
	{x: 1.7567160501140573 , y: 0.2137334416001264 },
	{x: 1.7268858116894925 , y: 0.22513224287825642 },
	{x: 1.6975533567908516 , y: 0.2367279471349037 },
	{x: 1.668661614718295 , y: 0.24852401650571104 },
	{x: 1.6401579418516612 , y: 0.2605243268027345 },
	{x: 1.6119933640360706 , y: 0.2727331858683103 },
	{x: 1.584121924315344 , y: 0.28515535683011556 },
	{x: 1.5565001123514342 , y: 0.29779608659339196 },
	{x: 1.5290863563890635 , y: 0.31066114005432643 },
	{x: 1.5018405618916264 , y: 0.3237568406821442 },
	{x: 1.474723683277409 , y: 0.3370901183052563 },
	{x: 1.4476973167176226 , y: 0.35066856515900835 },
	{x: 1.4207233028407453 , y: 0.3645005015217512 },
	{x: 1.393763328484905 , y: 0.37859505259817305 },
	{x: 1.3667785163646917 , y: 0.3929622387251889 },
	{x: 1.3397289906342564 , y: 0.40761308150446524 },
	{x: 1.3125734047423603 , y: 0.4225597291453972 },
	{x: 1.285268415525194 , y: 0.4378156051863125 },
	{x: 1.257768083913358 , y: 0.45339558592455326 },
	{x: 1.230023177550438 , y: 0.4693162134340768 },
	{x: 1.2019803434433678 , y: 0.4855959531355919 },
	{x: 1.1735811085966905 , y: 0.5022555077336204 },
	{x: 1.1447606520554612 , y: 0.5193182032820312 },
	{x: 1.1154462707628698 , y: 0.5368104686926191 },
	{x: 1.0855554307417705 , y: 0.5547624379467335 },
	{x: 1.054993248831086 , y: 0.5732087158522927 },
	{x: 1.0236491793760774 , y: 0.5921893654247317 },
	{x: 0.9913925691509777 , y: 0.6117512012184718 },
	{x: 0.9580665645007569 , y: 0.6319495139559785 },
	{x: 0.923479555960604 , y: 0.6528504178172737 },
	{x: 0.8873928291306683 , y: 0.6745341216178654 },
	{x: 0.8495021583784232 , y: 0.6970996151625547 },
	{x: 0.8094093099681398 , y: 0.7206716060749445 },
	{x: 0.7665758506149639 , y: 0.745411199394102 },
	{x: 0.720243901405765 , y: 0.7715331508504226 },
	{x: 0.6692899939257193 , y: 0.7993354788094211 },
	{x: 0.61192851624031 , y: 0.8292544337304386 },
	{x: 0.5450240001130748 , y: 0.8619779571909598 },
	{x: 0.4621373410386326 , y: 0.8987184624773276 },
	{x: 0.34553857472350036 , y: 0.9420485623830128 },
	{x: 0.0 , y: 1.0 }
];

const zig32 = [
	{x: 2.961300121264019 , y: 0.012467260831320232 },
	{x: 2.6984480795503902 , y: 0.026231061446984352 },
	{x: 2.5242946658509324 , y: 0.0413355745710653 },
	{x: 2.390096485914682 , y: 0.05748216196579809 },
	{x: 2.278807531929436 , y: 0.07453534148069191 },
	{x: 2.1823828226197066 , y: 0.09242133837210556 },
	{x: 2.0963521737930373 , y: 0.1110975962723092 },
	{x: 2.01795605671304 , y: 0.1305402953291538 },
	{x: 1.945358509770532 , y: 0.15073832902598758 },
	{x: 1.8772661272491797 , y: 0.1716901197769005 },
	{x: 1.8127244667352638 , y: 0.19340187595285885 },
	{x: 1.751000664837688 , y: 0.21588667448687265 },
	{x: 1.6915114275350167 , y: 0.2391640753758085 },
	{x: 1.6337764012383413 , y: 0.2632601256706719 },
	{x: 1.5773863873327256 , y: 0.2882076915685061 },
	{x: 1.521980471256279 , y: 0.3140471084415912 },
	{x: 1.4672285006602153 , y: 0.34082717901541193 },
	{x: 1.4128165866633553 , y: 0.36860659061618145 },
	{x: 1.3584339238885397 , y: 0.3974558728350997 },
	{x: 1.3037594526403904 , y: 0.4274600885098286 },
	{x: 1.2484467896152374 , y: 0.45872256131466604 },
	{x: 1.192105380494165 , y: 0.4913701236867728 },
	{x: 1.1342747701347344 , y: 0.5255606785648359 },
	{x: 1.0743867364794204 , y: 0.5614944271638445 },
	{x: 1.011705595722616 , y: 0.5994311803350343 },
	{x: 0.9452272678278825 , y: 0.6397183395684553 },
	{x: 0.8734944708377029 , y: 0.6828389157721897 },
	{x: 0.7942229601008874 , y: 0.7295006243381652 },
	{x: 0.7034359732286597 , y: 0.7808196449152617 },
	{x: 0.5930063593185145 , y: 0.8387620106506161 },
	{x: 0.44060840394183975 , y: 0.9074944007704455 },
	{x: 0 , y: 1.0000000000000 }
];

const zig16 = [
	{x: 2.6755367657376135 ,y: 0.027896654927713295 },
	{x: 2.377117382950875  ,y: 0.059288286253202635 },
	{x: 2.1715792686904782 ,y: 0.0946207710308645   },
	{x: 2.00757177604142   ,y: 0.13329744517247902  },
	{x: 1.8666574868883317 ,y: 0.1751337893322081   },
	{x: 1.7398531088225666 ,y: 0.22012836618295933  },
	{x: 1.6218930282346837 ,y: 0.26840224822617764  },
	{x: 1.509204967669662  ,y: 0.32018708377679583  },
	{x: 1.3989965159789748 ,y: 0.3758385463329482   }, 
	{x: 1.2887218071635789 ,y: 0.435874052346381    }, 
	{x: 1.175632501194992  ,y: 0.5010467399512291   },
	{x: 1.0561840000837082 ,y: 0.5724886775145874   },
	{x: 0.9248728798396774 ,y: 0.6520102985021906   },
	{x: 0.7711012445296194 ,y: 0.7428221987953276   },
	{x: 0.5665151048650169 ,y: 0.8517436463272425   },
	{x: 0.0		       ,y: 1.0			 }
];

const zig8 = [
	{x: 2.338371698247253  ,y: 0.06495951173303799 },
	{x: 1.981904936400511  ,y: 0.14029981808845185 },
	{x: 1.71650812577678   ,y: 0.22919088288328496 },
	{x: 1.4853586756432944 ,y: 0.33182578304669236 },
	{x: 1.2629701985308337 ,y: 0.4504325835506032  },
	{x: 1.0273863717802294 ,y: 0.5899241094185245  },
	{x: 0.738368917976451  ,y: 0.7614016031422421  },
	{x: 0.0		       ,y: 1.0		       }
];

const zig4 = [
	{x: 1.9149282638037446 , y: 0.15985707763037652 },
	{x: 1.4371588314146473 , y: 0.35603980116412315 },
	{x: 0.9820090215959199 , y: 0.6174415571516476 },
	{x: 0.0 , y: 1.0}
];

const zig = {4: zig4, 8: zig8, 16: zig16, 32: zig32, 64: zig64, 128: zig128, 256: zig256};

class Plot {
	constructor() {
		this.draw();

		this.run_flag = false;
		this.idx = -1;
		this.counter = 0;
		this.total = 0;

	}

	draw() {	
		this.svg = d3.selectAll("#svg-plot");

		this.margin = {top: 10, right: 10, bottom: 50, left: 40};
		let dimension = this.get_dimension();

		this.width  = dimension[0]  - this.margin.left - this.margin.right;
		this.height = dimension[1] - this.margin.top  - this.margin.bottom;

		this.set_svg(this.width + this.margin.left, this.height + this.margin.bottom);

		this.svg.append("defs")
		    .append("clipPath")
		    .attr("id", "clip")
		    .append("rect")
		    .attr("width", this.width)
		    .attr("height", this.height)
		    .attr("transform", 
		          "translate(" + this.margin.left + "," + this.margin.top + ")");

		this.svg
		    .selectAll("#plot")
		    .data([1])
		    .join("g")
		    .attr("id", "plot")
		    .attr("transform", 
		          "translate(" + this.margin.left + "," + this.margin.top + ")");
		
		let zig_nbr = parseInt(d3.selectAll("#slice").property("value"));
		this.selected_zig_size = zig_nbr;
		this.selected_zig = zig[this.selected_zig_size];

		this.plot = this.svg.selectAll("#plot");

		this.xscale = d3.scaleLinear()
				.range([this.margin.left, this.width - this.margin.right])
				.domain([0, 4.0]);

		this.yscale = d3.scaleLinear()
				.range([this.height, 0])
				.domain([0, 1.1]);

		this.line_pdf = d3.line()
		                  .x(d=>this.xscale(d))
				  .y(d=>this.yscale(norm_pdf(d)));

		let flat_line = d3.line()
				  .x(d=>this.xscale(d))
				  .y(this.height);

		this.draw_tail();
		this.draw_svg(this.height, this.width, 1000);
		this.highlight_square(this.idx);

		let vertical_line = d3.line()
				      .x(d=>{return this.xscale(d.x);})
				      .y(d=>this.yscale(d.y));
		
		this.plot
		    .selectAll("line")
		    .data(this.selected_zig.slice(0,-1))
		    .join("line")
		    .attr("x1", d=>this.xscale(d.x))
		    .attr("x2", d=>this.xscale(d.x))
		    .attr("y1", this.yscale(0))
		    .attr("y2", d=>this.yscale(0.0))
		    .transition().duration(1000)
		    .attr("y2", d=>this.yscale(d.y))
		    //.attr("id", (d,i)=>{return "vertical_"+i;})
		    .attr("class", "vertical")
		    .attr("stroke", "black")
		    .attr("stroke-dasharray", ("3,3"));

		this.plot
		    .datum(linspace(0, 6, 200))
		    .append("path")
		    .attr("clip-path", "url(#clip)")
  		    .attr("d", flat_line)
  		    .transition().duration(500)
		    .attr("d", this.line_pdf)
		    .attr("id", "line-pdf");

		this.plot
		    .append("g")
		    .attr("id", "x-axis")
		    .call(d3.axisBottom(this.xscale))
		    .attr("transform", "translate(0, " + this.height + ")");

		this.plot
		    .append("g")
		    .attr("id", "y-axis")
		    .call(d3.axisLeft(this.yscale))
		    .attr("transform", "translate(" + this.margin.left + ",0)");

		this.plot
		    .append("text")
		    .raise()
		    .attr("id", "xlabel")
		    .text("|x|")
		    .attr("transform", "translate(" + (this.width/2.05+this.margin.left/2.6) + "," + (this.height+this.margin.bottom/1.5) + ")");

		this.plot
		    .append("text")
		    .raise()
		    .attr("id", "ylabel")
		    .attr("transform", "rotate(-90)")
		    .attr("y", 0 - this.margin.left/2.0)
		    .attr("x", 0 - (this.height/1.6))
		    .style("anchor", "middle")
		    .text("Unnormalised density");
		
		this.legend = this.plot
		    .append("g")
		    .attr("transform", "translate(" + this.xscale(3.2) + "," + this.yscale(0.95) +")")
		    .attr("id", "legend");

		this.legend.append("text").text("Ziggurat").attr("transform", "translate(20, 10)");
		this.legend.append("rect").attr("class", "legend-slice").attr("height", 10).attr("x", -10).attr("y", 0).attr("width", 20);
		this.legend.append("text").text("RHS normal").attr("transform", "translate(20, 30)");
		this.legend.append("rect").attr("class", "legend-pdf").attr("height", 2).attr("x", -10).attr("y", 25).attr("width", 20);
	}

	redraw() {
		this.plot.selectAll("#valid").remove();
		let [width_, height_] = this.get_dimension();

		this.height = height_ - this.margin.top  - this.margin.bottom;
		this.width  = width_  - this.margin.left - this.margin.right;

		this.set_svg(this.width + this.margin.left, this.height + this.margin.bottom);

		d3.selectAll("#clip").select("rect")
		  .attr("width", this.width)
		  .attr("height", this.height);

		this.selected_zig_size = parseInt(d3.selectAll("#slice").property("value"));
		this.selected_zig = zig[this.selected_zig_size];

		this.xscale.range([this.margin.left, this.width - this.margin.right]);
		this.yscale.range([this.height, 0]);

		this.line_pdf.x(d=>this.xscale(d))
		             .y(d=>this.yscale(norm_pdf(d)));

		this.draw_tail();
		this.draw_svg(0);

		this.plot
		    .selectAll("#line-pdf")
		    .datum(linspace(0, 6, 200))
		    .attr("d", this.line_pdf)
		    .raise()
		    .attr("clip-path", "url(#clip)")
		    .attr("id", "line-pdf");


		this.plot
		    .selectAll("#x-axis")
		    .call(d3.axisBottom(this.xscale))
		    .attr("transform", "translate(0," + this.height + ")");

		this.plot
		    .selectAll("#y-axis")
		    .call(d3.axisLeft(this.yscale))
		    .attr("transform", "translate(" + this.margin.left + ",0)");

		this.plot
		    .selectAll("#xlabel")
		    .attr("transform", "translate(" + (this.width/2.05+this.margin.left/2.6) + "," + (this.height+this.margin.bottom/1.5) + ")");

		this.plot
		    .selectAll("#ylabel")
		    .attr("y", 0 - this.margin.left/2.0)
		    .attr("x", 0 - (this.height/1.6));

		this.plot
		    .selectAll(".vertical")
		    .data(this.selected_zig.slice(0,-1))
		    .join("line")
		    .attr("x1", d=>this.xscale(d.x))
		    .attr("y1", d=>this.yscale(0))
		    .attr("x2", d=>this.xscale(d.x))
		    .attr("y2", d=>this.yscale(d.y))
		    //.attr("id", (d,i)=>{return "vertical_"+i;})
		    .attr("class", "vertical")
		    .attr("stroke", "black")
		    .attr("stroke-dasharray", ("3,3"));

		this.plot
		    .selectAll("#valid").remove();

		if (this.red_flag) {
			this.red_tail(this.idx, 0);
		}
		else if (this.green_tail_flag) {
			this.green_tail(this.idx, 0);
		}
		else if (this.green_flag) {
			this.green_square(this.idx, 0);
		}
		else {
		}

		this.plot
		    .selectAll("#test")
		    .attr("cx", this.xscale(this.candidate))
		    .attr("cy", this.yscale(this.cy))
		    .raise();

		this.plot
		    .selectAll("#legend")
		    .raise()
		    .attr("transform", "translate(" + this.xscale(3.2) + "," + this.yscale(0.95) +")");
	}

	get_dimension() {
		let height = parseFloat(this.svg.style("height"));
		let width  = parseFloat(this.svg.style("width"));

		return [width, height];
	}

	set_svg(width, height) {
		this.svg
		    .attr("width",  width)
		    .attr("height", height);
	}


	draw_svg(duration_) {
		this.plot
		    .selectAll(".bar")
		    .data(this.selected_zig.slice(0, -1))
		    .join("rect")
		    .raise()
		    .attr("class", "bar slice")
		    .attr("x", d=>this.xscale(0))
		    .attr("y", (d,i)=>{
				return this.yscale(this.selected_zig[i+1].y);
			    })
		    .attr("height", (d,i)=>{
			    if (i < this.selected_zig.length-1) {
				    return this.height-this.yscale(this.selected_zig[i+1].y - 
				                       this.selected_zig[i].y);
			    }
			    return this.height-this.yscale(0);
			})
		    .transition().duration(duration_)
		    .attr("width", d=>this.xscale(d.x)-this.xscale(0))
		    ;//.attr("clip-path", "url(#clip)");
	}

	highlight_square(idx) {
		if (this.idx != -1) {
			d3.selectAll(".slice")
			  .filter((d,i)=>i==idx)
			  //.transition().duration(1000)
			  //.delay(1000)
			  .style("stroke", "blue")
			  .attr("stroke-width", 4);
			  //.attr("class", "active");
		}
	}

	green_square(idx, duration_) {
		let data_ = [{"x": 0, "y": 0},
		             {"x": 0, "y": this.selected_zig[0].y},
			     {"x": this.selected_zig[0].x, "y": this.selected_zig[0].y},
			     {"x": this.selected_zig[0].x, "y": 0},
			     {"x": 0, "y": 0}				
			];
		if (idx > 0) {
			data_ = [{"x": 0, "y": this.selected_zig[idx-1].y}, 
				 {"x": 0, "y": this.selected_zig[idx].y}, 
				 {"x": this.selected_zig[idx].x, "y": this.selected_zig[idx].y}, 
				 {"x": this.selected_zig[idx].x, "y": this.selected_zig[idx-1].y},
				 {"x": 0, "y": this.selected_zig[idx-1].y}
				];
		}

		let line = d3.line()
		             .x(d=>this.xscale(d.x))
			     .y(d=>this.yscale(d.y));

		this.plot
		  .datum(data_)
		  .append("path")
		  .attr("d", line)
		  .attr("id", "valid")
		  .attr("fill", "none")
		  .transition().duration(duration_)
		  .attr("fill", "green")
		  .style("stroke-width", 0)
		  .attr("opacity", 0.5);
	}

	green_tail(idx, duration_) {
		let data_ = [{"x": this.selected_zig[idx].x, "y": this.selected_zig[idx-1].y},
		             {"x": this.selected_zig[idx].x, "y": this.selected_zig[idx].y}
			    ];
		let xs = linspace(this.selected_zig[idx].x, this.selected_zig[idx-1].x, 50);
		for (var x of xs) {
			data_.push({"x": x, "y": norm_pdf(x)});	
		}
		data_.push({"x": this.selected_zig[idx-1].x, "y": this.selected_zig[idx-1].y});
		data_.push({"x": this.selected_zig[idx].x, "y": this.selected_zig[idx-1].y});
		
		let line = d3.line()
		   	     .x(d=>this.xscale(d.x))
			     .y(d=>this.yscale(d.y));

		this.plot
		    .datum(data_)
		    .append("path")
		    .attr("d", line)
		    .attr("fill", "none")
		    .transition().duration(duration_)
		    .attr("fill", "green")
		    .style("stroke-width", 0)
		    .attr("id", "valid")
		    .attr("opacity", 0.5);
	}

	red_tail(idx, duration_) {
		let data_ = [{"x": this.selected_zig[idx].x, "y": this.selected_zig[idx].y},
		             {"x": this.selected_zig[idx-1].x, "y": this.selected_zig[idx].y}
		             //{"x": this.selected_zig[idx].x, "y": this.selected_zig[idx-1].y}
			    ];
		let xs = linspace(this.selected_zig[idx-1].x, this.selected_zig[idx].x, 50);
		for (var x of xs) {
			data_.push({"x": x, "y": norm_pdf(x)});	
		}
		//data_.push({"x": this.selected_zig[idx].x, "y": this.selected_zig[idx].y});
		
		let line = d3.line()
		   	     .x(d=>this.xscale(d.x))
			     .y(d=>this.yscale(d.y));

		this.plot
		    .datum(data_)
		    .append("path")
		    .attr("d", line)
		    .attr("fill", "none")
		    .transition().duration(duration_)
		    .attr("fill", "red")
		    .style("stroke-width", 0)
		    .attr("id", "valid")
		    .attr("opacity", 0.5);
	}

	draw_tail() {
		let data = [{"x": 0.0, "y": 0.0},
			    {"x": 0.0, "y": this.selected_zig[0].y},
			    this.selected_zig[0],
			    ]
		let tail_x = linspace(this.selected_zig[0].x, 4, 50);
		for (var x of tail_x) {
			data.push({"x": x, "y": norm_pdf(x)});
		}
		data.push({"x": 0, "y": 0});

		let tail = d3.line()
			     .x(d=>this.xscale(d.x))
			     .y(d=>this.yscale(d.y));
		this.plot
		    .selectAll("#tail")
		    .data([1])
		    .join("path")
		    .datum(data)
		    .attr("d", tail)
		    .raise()
		    .attr("fill", "none")
		    .attr("class", "slice")
		    .attr("id", "tail")
		    ;//.attr("clip-path", "url(#clip)");
	}

	new_candidate() {
		this.green_flag = false;
		this.green_tail_flag = false;
		this.red_flag = false;

		let zig_nbr = parseInt(d3.selectAll("#slice").property("value"));

		this.idx = randint(zig_nbr);
		
		this.highlight_square(this.idx);
		
		let u = 2*Math.random()-1;
		let u_abs = Math.abs(u);

		let z;
		if (this.idx > 0) {
			z = this.selected_zig[this.idx-1].x * u_abs;
		}
		else {
			let V = (this.selected_zig[1].y - this.selected_zig[0].y)*this.selected_zig[0].x;
			z = V / this.selected_zig[0].y * u_abs;
		}
		this.candidate = z;
		
		let cy = 0;
		if (this.idx > 0) {
			cy = this.selected_zig[this.idx-1].y;
		}
		this.cy = cy;

		this.plot
		    .append("circle")
		    .attr("cy", this.yscale(cy))
		    .attr("cx", this.xscale(z))
		    .attr("r", 5)
		    .attr("id", "test");

		if (z < this.selected_zig[this.idx].x) {
			this.green_flag = true;
			this.green_square(this.idx, 1000);
			this.plot.selectAll("#test").raise();
		}
		else {
			if (this.idx == 0) {
				let x = 1;
				let y = 0;
				while (y+y < x*x) {
					let x = -Math.log(Math.random())/this.selected_zig[0].x;
					let y = Math.random();

					return x + this.selected_zig[0].x;
				}
			}
			else {
				let u1 = Math.random();
				let dy = this.selected_zig[this.idx-1].y + u1*(this.selected_zig[this.idx].y-this.selected_zig[this.idx-1].y);


				if (dy < norm_pdf(z)) {
					this.green_tail_flag = true;
					this.green_tail(this.idx, 1000);
					this.plot.selectAll("#test").raise();
				}
				else {
					this.red_flag = true;
					this.red_tail(this.idx, 1000);
				}
				this.cy = dy;
				this.plot
				    .selectAll("#test")
				    .raise()
				    .transition().duration(1000)
				    .attr("cy", this.yscale(dy));
			}
		}
	}

	clean_candidate() {
		this.plot.selectAll("circle").remove();
		this.plot.selectAll("#valid").remove();

		this.plot.selectAll(".slice")
		    .style("stroke", "black")
		    .attr("stroke-width", 1);
	}

	new_candidate_run() {
		this.green_flag = false;
		this.green_tail_flag = false;
		this.red_flag = false;

		let zig_nbr = parseInt(d3.selectAll("#slice").property("value"));

		this.idx = randint(zig_nbr);
		
		let u = 2*Math.random()-1;
		let u_abs = Math.abs(u);

		let z;
		if (this.idx > 0) {
			z = this.selected_zig[this.idx-1].x * u_abs;
		}
		else {
			let V = (this.selected_zig[1].y - this.selected_zig[0].y)*this.selected_zig[0].x;
			z = V / this.selected_zig[0].y * u_abs;
		}
		this.candidate = z;
		
		if (z < this.selected_zig[this.idx].x) {
			this.green_flag = true;
			this.green_square(this.idx, 0);
			this.counter++;
			return Math.sign(u)*z;
		}
		else {
			if (this.idx == 0) {
				let x = 1;
				let y = 0;
				while (y+y < x*x) {
					let x = -Math.log(Math.random())/this.selected_zig[0].x;
					let y = Math.random();
					this.counter++;

					return Math.sign(u)*(x + this.selected_zig[0].x);
				}
			}
			else {
				let u1 = Math.random();
				let dy = this.selected_zig[this.idx-1].y + u1*(this.selected_zig[this.idx].y-this.selected_zig[this.idx-1].y);


				if (dy < norm_pdf(z)) {
					this.green_tail_flag = true;
					this.green_tail(this.idx, 0);
					this.counter++;

					return Math.sign(u)*z;
				}
				else {
					this.red_flag = true;
					this.red_tail(this.idx, 0);
					return NaN;
				}
			}
		}
	}

	show_counter() {
		this.plot
		    .selectAll("#counter")
		    .data([1])
		    .join("text")
		    .text("Acceptance rate: " + (this.counter/this.total*100).toFixed(2) + "%")
		    .attr("transform", "translate(" + this.xscale(2.5) + "," + this.yscale(0.4) + ")")
		    .attr("id", "counter");
	}
}

class Histogram {
	constructor() {
		this.draw();

		this.candidates = [];
	}

	draw() {
		this.svg = d3.selectAll("#histogram-plot");
		this.margin = {top: 10, right: 10, bottom: 50, left: 40};
		
		let dimension = this.get_dimension();

		let width  = dimension[0] - this.margin.left - this.margin.right;
		let height = dimension[1] - this.margin.top  - this.margin.bottom;
		this.width = width;
		this.height = height;

		this.set_svg(width + this.margin.left, height + this.margin.bottom);

		this.svg
		    .selectAll("#histogram-plot")
		    .data([1])
		    .join("g")
		    .attr("id", "hist-plot")
		    .attr("transform",
			  "translate(" + this.margin.left + "," + this.margin.top + ")");
		
		this.plot = this.svg.selectAll("#hist-plot");

		this.xscale = d3.scaleLinear().domain([-4,4]).range([this.margin.left, width-this.margin.right]);

		this.yscale = d3.scaleLinear().domain([0, 0.5]).range([height, 0]);
	
		this.bins = linspace(-4, 4, 40);
		let x_range = linspace(-4, 4, 100);
		this.line = d3.line()
			      .x(d=>this.xscale(d))
			      .y(d=>this.yscale(normal_pdf(d)));

		this.plot
		    .datum(x_range)
		    .append("path")
		    .attr("d", this.line)
		    .attr("id", "line-pdf");

		this.plot
		    .append("g")
		    .attr("id", "x-axis")
		    .call(d3.axisBottom(this.xscale))
		    .attr("transform", "translate(0," + this.height + ")");

		this.plot
		    .append("g")
		    .attr("id", "y-axis")
		    .call(d3.axisLeft(this.yscale))
		    .attr("transform", "translate(" + this.margin.left + ",0)");

		this.plot
		    .append("text")
		    .attr("id", "xlabel")
		    .text("x")
		    .attr("transform", "translate(" + (this.width/2.0+this.margin.left/2.6) + "," + (this.height+this.margin.bottom/1.5) + ")");

		this.plot
		    .append("text")
		    .raise()
		    .attr("id", "ylabel")
		    .attr("transform", "rotate(-90)")
		    .attr("y", 0 - this.margin.left/2.0)
		    .attr("x", 0 - (this.height/1.6))
		    .style("anchor", "middle")
		    .text("Probaility density");

		this.legend = this.plot
		    .append("g")
		    .attr("transform", "translate(" + this.xscale(2.3) + "," + this.yscale(0.4) +")")
		    .attr("id", "legend");

		this.legend.append("text").text("Sample").attr("transform", "translate(20, 10)");
		this.legend.append("rect").attr("class", "legend-hist").attr("height", 10).attr("x", -10).attr("y", 0).attr("width", 20);
		this.legend.append("text").text("Normal").attr("transform", "translate(20, 30)");
		this.legend.append("rect").attr("class", "legend-pdf").attr("height", 2).attr("x", -10).attr("y", 25).attr("width", 20);
	}

	redraw() {
		this.margin = {top: 10, right: 10, bottom: 50, left: 40};
		
		let dimension = this.get_dimension();

		let width  = dimension[0] - this.margin.left - this.margin.right;
		let height = dimension[1] - this.margin.top  - this.margin.bottom;
		this.width = width;
		this.height = height;

		this.set_svg(width + this.margin.left, height + this.margin.bottom);

		this.xscale.range([this.margin.left, width-this.margin.right]);

		this.yscale.range([height, 0]);

		this.draw_svg();

		this.plot
		    .selectAll("#x-axis")
		    .call(d3.axisBottom(this.xscale))
		    .attr("transform", "translate(0," + this.height + ")");

		this.plot
		    .selectAll("#y-axis")
		    .call(d3.axisLeft(this.yscale))
		    .attr("transform", "translate(" + this.margin.left + ",0)");
		
		this.line
		    .x(d=>this.xscale(d))
		    .y(d=>this.yscale(normal_pdf(d)));

		this.plot
		    .selectAll("#line-pdf")
		    .attr("d", this.line); 

		this.plot
		    .selectAll("#xlabel")
		    .attr("transform", "translate(" + (width/2.0+this.margin.left/2.6) + "," + (height+this.margin.bottom/1.5) + ")");

		this.plot
		    .selectAll("#ylabel")
		    .attr("y", 0 - this.margin.left/2.0)
		    .attr("x", 0 - (height/1.6));

		this.plot
		    .selectAll("#legend")
		    .raise()
		    .attr("transform", "translate(" + this.xscale(2.3) + "," + this.yscale(0.4) +")");
	}

	draw_svg() {
		let hist = histogram(this.candidates, this.bins, 4.0);
		let normalising_const = constant(hist);
		this.plot
		    .selectAll(".hist")
		    .data(hist)
		    .join("rect")
		    .attr("x", d=>this.xscale(d.x0))
		    .attr("y", d=>this.yscale(d.length/normalising_const))
		    .attr("width", d=>this.xscale(d.x1)-this.xscale(d.x0)+1)
		    .attr("height", d=>this.height-this.yscale(d.length/normalising_const))
		    .attr("class", "hist");
		this.plot
		    .selectAll("#line-pdf")
		    .raise();
	}

	set_svg(width, height) {
		this.svg
		    .attr("width",  width)
		    .attr("height", height);
	}

	get_dimension() {
		let height = parseFloat(this.svg.style("height"));
		let width  = parseFloat(this.svg.style("width"));

		return [width, height];
	}
}

function randint(max) {
	return Math.floor(Math.random() * max);
}

function histogram(value, array_bins, end_value) {
	let res = [];
	for (var i=0; i<array_bins.length-1; i++) {
		let filtered = d3.filter(value, (d) => {return d>array_bins[i] &&
		                                               d<array_bins[i+1]});
		res.push({"length": filtered.length, "x0": array_bins[i], "x1": array_bins[i+1]}); 
	}
	let filtered = d3.filter(value, (d) => {return d>array_bins[array_bins.length-1] &&
						       d<end_value});
	res.push({"length": filtered.length, "x0": array_bins[array_bins.length-1], "x1": end_value}); 

	return res;
}

function constant(data) {
	var res = 0.0;
	for (var i=0; i<data.length; i++) {
		res += (data[i].x1-data[i].x0)*data[i].length;
	}

	return res;
}

window.addEventListener("load", function(event) {
	plot = new Plot();
});

window.addEventListener("resize", function(event) {
	plot.redraw();	
	try {
		hist.redraw();
	}
	catch (e) {
	}
});

d3.selectAll("#slice").on("change",  function() {
	plot.selected_zig_size = +this.value;
	plot.redraw();
	plot.clean_candidate();
	plot.plot.selectAll("circle").remove();
	plot.plot.selectAll("valid").remove();
});

document.getElementById("update").addEventListener("click", function(event) {
	plot.clean_candidate();
	plot.new_candidate();
});

var interval;
var create_hist = true;
document.getElementById("run").addEventListener("click", function(event) {
	plot.clean_candidate();
	if (!plot.run_flag) {
		plot.run_flag = true;
		d3.selectAll(".svg-container")
		  .style("height", "50%");
		plot.redraw();
		d3.selectAll(".svg-container")
		  .selectAll("#histogram-plot")
		  .data([1])
		  .join("svg")
		  .attr("id", "histogram-plot")
		  .attr("class", "svg-contain");

		if (create_hist) {
			hist = new Histogram();
			create_hist = false;
		}
		d3.selectAll("#update").attr("disabled", "disabled");
		d3.selectAll("#slice").attr("disabled", "disabled");

		d3.selectAll(".input-container")
		  .selectAll("#stop")
		  .data([1])
		  .join("input")
		  .attr("type", "button")
		  .attr("value", "Stop")
		  .attr("id", "stop")
		  .on("click", d=>{
			console.log("Stop");
			plot.run_flag = false;	  
			plot.green_tail_flag = false;
			plot.green_flag = false;
			plot.red_flag = false;
			plot.clean_candidate();
			clearInterval(interval);
			document.getElementById("restart").removeAttribute("disabled");
		});

		d3.selectAll(".input-container")
		  .selectAll("#restart")
		  .data([1])
		  .join("input")
		  .attr("type", "button")
		  .attr("value", "Restart")
		  .attr("id", "restart")
		  .attr("disabled", "disabled")
		  .on("click", d=>{
			console.log("Restart");
			plot.run_flag = false;	  
			clearInterval(interval);
			hist.candidates = [];
			plot.clean_candidate();
			hist.svg.selectAll(".hist").remove();
		});

		var gotime = 1;
		let nbr_attempts = 10000;
		interval = setInterval(function () {
			var cand = plot.new_candidate_run();
			if (!isNaN(cand)) 
				hist.candidates.push(cand);
			plot.plot.selectAll("#valid").transition().duration(0.01).remove();
			hist.draw_svg();
			plot.total += 1;
			plot.show_counter();
			

		gotime += 1;
       		if (gotime > nbr_attempts) {
			plot.run_flag = false;
            		clearInterval(interval);
			d3.selectAll("#valid").transition().duration(0).remove();
			d3.select("#valid").transition().duration(0).remove();
        	}
    		}, 10)
		d3.selectAll("#valid").transition().duration(0).remove();
		d3.select("#valid").transition().duration(0).remove();
	}
	plot.green_tail_flag = false;
	plot.green_flag = false;
	plot.red_flag = false;
	d3.selectAll("#valid").transition().duration(0).remove();
	d3.select("#valid").transition().duration(0).remove();

});
